/* .container {
    width: 600px;
    height: 300px;
    border: solid black 2px;
} */


/* .container{
    background-image: url("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ2OluqIkJfyvv2nkebF0ohdXrMOdmra_uyPzr0K4XrkAuzQvgWJivQZWW9-myrMQ9rlmU&usqp=CAU");
    for repeating in y
    background-repeat: repeat-y;
    for no repeat
    background-repeat: no-repeat;
}  */


/* 
object-fit: fill
Behavior: The image is stretched to completely fill the container, ignoring the aspect ratio.
No cropping, but distortion is possible (the image might look squished or stretched).
by default property
*/
/* img {
    width: 600px;
    height: 350px;
    border: 2px solid green;
    object-fit: fill;
} */

/* 
 object-fit: cover
Behavior: The image fills the container entirely.
It may be cropped to maintain its aspect ratio.
The entire container is covered, but some parts of the image might be cut off.
*/
/* img {
    object-fit: cover;
    telling what to cut
    object-position: top right;
    object-position: 10px 20px; 
} */

/* 
object-fit: contain
Behavior: The entire image is shrunk to fit inside the container.
The full image is visible, but there may be empty space (letterboxing) on the sides or top/bottom.
Aspect ratio is preserved.
*/
/* img {
    object-fit: contain;
} */


/* filter */

/* blur , default 0px , make the image blur*/
/* img {
    filter: blur(5px);
} */

/* britness , default 100% , give britness to the image*/
/* img {
    filter : brightness(10%);
} */

/* contrast , default 100%  , change its contrast*/
/* img {
    filter: contrast(0%);
} */

/* grayscale , default 0% ,  it will turn image gray */
/* img{
    filter : grayscale(10%);
} */

/* sepia , default 0% , applies a warm, old-photo tone*/
/* img{
    filter: sepia(0%);
} */

/* invert ,default 0 , it will convert into ghost image in invert(1)*/
/* img{
    filter: invert(1);
} */

/* opacity , defautl 1, range 0-1, it will make background visible  */
/* img{
    filter: opacity(0.5);
} */

/* transform */

* {
    margin: 0;
    padding: 0;
}

.parent {
    width: 100vw;
    height: 100vh;
    display: flex;
    /* justify-content: center;
    align-items: center; */
}

.box {
    width: 100px;
    height: 100px;
    border: 2px solid black;
}

/* rotate the whole cube */
/* .box{
    transform: rotate(90deg);
    it will tell from where is the origin so it can rotate
    transform-origin: -0%,-0%;
    transform: rotate(0.25turn);
} */

/* rotate around the axis */
/* .box {
    transform: rotateX(30deg);
    transform: rotateY(10deg);
    transform: rotateZ(60deg);
} */

/* scale default 1 , it will resize the element (x,y)*/
/* transform: scale(x, y); */
/* .box {
    transform: scale(2);
    transform: scale(x,y);
} */

/* scew creating a distorted, parallelogram-like effect */
/* transform: skew(xAngle, yAngle); */
/* .box{
    transform: scewX(5deg);
    transform: scew(xdeg,ydeg);
} */

/* transform function used to move (shift) an element from its current position without affecting the layout or flow of other elements*/
/* when we do transform: translateX(50%) its 50% of its own width */
/* transform: translate(x, y); */
/* .box{
    transform: translateX(10%);
} */

/* multiple property at a same time */
/* .box{
    transform: translateX(20%) skewX(40deg) scale(2);
} */

/* transition */
/* .parent{
    background-color: aqua;
} */

/* .box{ */
    /* in which we shoudl apply  */
    /* transition-property: all; */
    /* transition-property: transform; */
    /* what should be the duration in sec which it should complete its journey */
    /* transition-duration: 3s; */
    /* how it should go ease , ease-in-out,linear , etc*/
    /* transition-timing-function: ease; */
    /* after how many sec it should start its journey */
    /* transition-delay: 1s; */

    /* all in one */
    /* background-color: brown; */
    /* transition: all 3s cubic-bezier(0.97, 0.76, 0, 0.61) 1s; */
/* } */

/* .translate{
    transform: translate(50vw,50vh);
    now its should also change its color
    background-color: blue;
} */


/* animation */
.box{
    width: 50px;
    height: 50px;
    /* animation: name duration timing-function delay iteration-count direction fill-mode; */
    /* animation-name: vivaanKaAnime;
    animation-duration: 3s;
    how much times the animation should happen
    animation-iteration-count: 1;
    animation-timing-function: linear;
    animation-delay: 1s;
    animation-direction: normal ;
    animation-play-state: running;
    forwards means it will stop at the end
    animation-fill-mode: forwards; */

    /* order doesn't matter here */
    /* animation:vivaanKaAnime forwards 4s 1  ,
    vivaan2Anime 4s  1 ; */
    animation: moveAndRotate alternate-reverse  3s linear infinite  ;

}

@keyframes vivaanKaAnime {
    from{

    }to{
        transform: translateX(1000px);
    }
}

@keyframes vivaan2Anime {
    25%{
        transform: rotateZ(90deg);
    }
    50%{
        transform: rotateZ(180deg);
    }
    75%{
        transform: rotateZ(270deg);
    }
    100%{
        transform: rotateZ(360deg);
    }
}

@keyframes moveAndRotate {
    0% {
      transform: translateX(0px) rotateZ(0deg);
    }
    25% {
      transform: translateX(250px) rotateZ(90deg);
    }
    50% {
      transform: translateX(500px) rotateZ(180deg);
    }
    75% {
      transform: translateX(750px) rotateZ(270deg);
    }
    100% {
      transform: translateX(1000px) rotateZ(360deg);
    }
  }
  